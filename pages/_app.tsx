import '@/styles/globals.css';
import type { AppProps } from 'next/app';
import Head from 'next/head';
import { wrapper, store, RootState } from '@/feature/store';
import { Provider, useDispatch, useSelector } from 'react-redux';
import Cookies from 'universal-cookie';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import axios from 'axios';
import { setCurrentUser } from '@/feature/userSlice';
import { useEffect } from 'react';
import Layout from '@/src/components/layout/WebLayout';
import type { ReactElement, ReactNode } from 'react';
import type { NextPage } from 'next';

export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {
  getLayout?: (page: ReactElement) => ReactNode;
};

type AppPropsWithLayout = AppProps & {
  Component: NextPageWithLayout;
};

const cookie = new Cookies();

function App({ Component, pageProps }: AppPropsWithLayout) {
  const userEdited = useSelector(
    (state: RootState) => state.userSlice.userEdited
  );
  const updateAvatar = useSelector(
    (state: RootState) => state.userSlice.updateAvatar
  );

  const renderWithLayout =
    Component.getLayout ||
    function (page) {
      return <Layout>{page}</Layout>;
    };
  const dispatch = useDispatch();
  const cookie: string = new Cookies().get('token');
  const me = async () => {
    await axios({
      method: 'post',
      url: 'http://localhost:4000/user/me',
      headers: {
        auth: `ut ${cookie}`,
      },
    })
      .then(res => {
        dispatch(setCurrentUser(res.data));
      })
      .catch(err => {
        console.log(err);
      });
  };

  useEffect(() => {
    me();
  }, [cookie, userEdited, updateAvatar]);

  
  return renderWithLayout(
    <>
      <Head>
        <title>BlogTor</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Provider store={store}>
        <ToastContainer
          position="bottom-left"
          autoClose={5000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="dark"
        />
        <Component {...pageProps} />
      </Provider>
    </>
  );
}

export default wrapper.withRedux(App);
